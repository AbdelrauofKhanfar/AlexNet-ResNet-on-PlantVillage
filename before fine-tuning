# -*- coding: utf-8 -*-
"""AlexNet & ResNet18 on PlantVillage (No Fine-Tuning)"""

# Install required libraries
!pip install -q torchvision kaggle

# Upload kaggle.json for dataset download
from google.colab import files
files.upload()

# Set up Kaggle API key
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download PlantVillage dataset from Kaggle
!kaggle datasets download -d emmarex/plantdisease
!unzip -q plantdisease.zip -d plantvillage

# Imports
import torch
import torch.nn as nn
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader, random_split

# Device configuration
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Transforms (same as ViT)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# Load the dataset
data_dir = 'plantvillage/PlantVillage'
dataset = datasets.ImageFolder(root=data_dir, transform=transform)

# Split into 80% train / 20% test (but we only use test)
train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size
_, test_dataset = random_split(dataset, [train_size, test_size])

test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Number of classes
num_classes = len(dataset.classes)
print(f"Number of classes: {num_classes}")

# ---------------------------
# Evaluation without training
# ---------------------------

def evaluate_model(model_name):
    if model_name == "alexnet":
        model = models.alexnet(pretrained=True)
        model.classifier[6] = nn.Linear(4096, num_classes)  # just replace head
    elif model_name == "resnet18":
        model = models.resnet18(pretrained=True)
        model.fc = nn.Linear(model.fc.in_features, num_classes)
    else:
        raise ValueError("Only 'alexnet' or 'resnet18' allowed")

    model.to(device)
    model.eval()

    total = 0
    correct = 0

    with torch.no_grad():
        for images, labels in test_loader:
            images = images.to(device)
            labels = labels.to(device)
            outputs = model(images)
            _, preds = torch.max(outputs, 1)
            correct += (preds == labels).sum().item()
            total += labels.size(0)

    acc = correct / total
    print(f"\nüîç {model_name.upper()} Accuracy WITHOUT Fine-Tuning: {acc:.4f}")

# Run both models
evaluate_model("alexnet")
evaluate_model("resnet18")
